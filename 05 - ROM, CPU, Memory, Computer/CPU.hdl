// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // regA: register A
    // jmp: is Jump?
    // saveA: save to A
    // conA: control on A

    And(a=instruction[5], b=instruction[15], out=saveA);

    // before A Mux
    Not(in=instruction[15], out=conMuxA);
    Mux16(a=cout, b=instruction, sel=conMuxA, out=muxA);

    // A
    Or(a=saveA, b=conMuxA, out=conA);
    ARegister(in=muxA, load=conA, out=regA);

    // output: addressM
    Or16(a=regA, b=regA, out[0..14]=addressM);

    // D
    And(a=instruction[15], b=instruction[4], out=conMuxD);
    DRegister(in=cout, load=conMuxD, out=regD);

    // before ALU Mux
    Mux16(a=regA, b=inM, sel=instruction[12], out=AorM);

    // ALU
    ALU(x=regD, y=AorM, 
        zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=cout, zr=zr, ng=ng
        );

    // jump
    Not(in=instruction[2], out=nj1);
    Not(in=nj1, out=j1);
    Not(in=instruction[1], out=nj2);
    Not(in=nj2, out=j2);
    Not(in=instruction[0], out=nj3);
    Not(in=nj3, out=j3);
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);

    // Mux
    // 0 0 0
    // 0 0 1
    And(a=nzr, b=nng, out=v001);
    // 0 1 0
    And(a=zr, b=nng, out=v010);
    // 0 1 1
    Or(a=zr, b=nng, out=ge);
    // 1 0 0
    And(a=nzr, b=ng, out=v100);
    // 1 0 1
    // 1 1 0
    Or(a=zr, b=ng, out=le);
    // 1 1 1
    Mux(a=false, b=v001, sel=j3, out=i000);
    Mux(a=v010, b=ge, sel=j3, out=i010);
    Mux(a=v100, b=nzr, sel=j3, out=i100);
    Mux(a=le, b=true, sel=j3, out=i110);

    Mux(a=i000, b=i010, sel=j2, out=u000);
    Mux(a=i100, b=i110, sel=j2, out=u100);

    Mux(a=u000, b=u100, sel=j1, out=aluc);
    
    And(a=instruction[15], b=aluc, out=jmp);
        
    // output: outM
    Or16(a=cout, b=cout, out=outM);
    
    // output: writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    PC(in=regA, load=jmp, inc=true, reset=reset, out[0..14]=pc);
    // Put your code here:
}