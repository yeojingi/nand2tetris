// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
 class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let color = true;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = -32767-1;
        
        return ;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = ~color;

        return ;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        var int bit, r;

        let address = (32*y) + (x/16);
        let value = Memory.peek(16384 + address);
        
        let r = x - ( ( x / 16 ) * 16);
        let bit = Math.bit(value, r);

        if (bit) {
            if (~color) {
                let value = value - twoToThe[r];
            }
        } else {
            if (color) {
                let value = value + twoToThe[r];
            }
        }

        do Memory.poke(16384 + address, value);

        return ;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int a, b;
        var int diff;

        let dx = x2 - x1;
        let dy = y2 - y1;

        let a = 0;
        let b = 0;

        let diff = 0; 

        if (dx = 0 ) {
            if ( dy > 0 ) {
                while ( b < dy ) { do Screen.drawPixel(x1, y1 + b); let b = b + 1; }
            } else {
                while ( b > dy ) { do Screen.drawPixel(x1, y1 + b); let b = b - 1; }
            }
            return ;
        }

        if (dy = 0) {
            if ( dx > 0 ) {
                while ( a < dx ) { do Screen.drawPixel(x1 + a, y1 + b); let a = a + 1; }
            } else {
                while ( a > dx ) { do Screen.drawPixel(x1 + a, y1 + b); let a = a - 1; }
            }
            return ;
        }

        if (dx > 0) {
            if (dy > 0) {
                // dx > 0 dy > 0
                while ( ( a < dx ) & ( b < dy) ) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if (diff < 0 ) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            } else {
                // dx > 0 dy < 0
                while ( ( a < dx ) & ( b > dy) ) {
                    // diff = a * dy - b * dx
                    // a / b < dy / dx 일 때, a + 1
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if (diff > 0 ) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b - 1;
                        let diff = diff + dx;
                    }
                }
            }
        } else {
            if (dy > 0) {
                // dx < 0 dy > 0
                while ( ( a > dx ) & ( b < dy) ) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if (diff > 0 ) {
                        let a = a - 1;
                        let diff = diff - dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            } else {
                // dx < 0 dy < 0
                while ( ( a > dx ) & ( b > dy) ) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if (diff < 0 ) {
                        let a = a - 1;
                        let diff = diff - dy;
                    } else {
                        let b = b - 1;
                        let diff = diff + dx;
                    }
                }
            }
        }

        return ;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, i;

        let dx = x2 - x1;
        let i = 0;

        while (i < (dx+1)) {
            do Screen.drawLine(x1+i, y1, x1+i, y2);
            let i = i + 1;
        }
        return ;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, sqrt;

        let dy = -r;

        while ( dy < (r+1) ) {
            let sqrt = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(x-sqrt, y+dy, x+sqrt, y+dy);
            let dy = dy + 1;
        }

        return ;
    }
}
