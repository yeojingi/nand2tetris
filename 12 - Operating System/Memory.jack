// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList, heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = null;
        let heap[1] = 14335;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;

        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array list, next, block, prev;
        var Array pointer;
        var boolean isBreak;

        let list = freeList;

        // search for freeList
        let prev = 0;
        let list = freeList;
        while ( ~isBreak ) {
            if (~(list[1] < size)) {
                let block = list;
                
                if (prev = 0) {
                    // 맨 앞일 경우
                } else {
                    let prev[0] = list[0];
                }
                let isBreak = true;
            } else {
                // To proceed
                if (list[0] = null) {
                    return -1;
                } else {
                    let prev = list;
                    let list = prev[0];
                }
            }
            
        }

        // carve a block with size size+2
        if (block[1] = size) {
            // 다 써서 없어지던가
            let pointer = block+1;
            let pointer[-1] = size;
        } else {
            // 남는 블록 1개를 만들던가
            let pointer = (block + block[1])- size ;
            let pointer[-1] = size;
            let block[1] = block[1] - (size + 1);
            let prev[0] = block;
        }

        // return the address
        return pointer;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment, pp;
        // var Array lastFreeList;

        let segment = o - 1;
        let segment[1] = segment[0];
        let segment[0] = null;

        let pp = freeList;
        while (~(pp[0] = null)) {
            let pp = pp[0];
        }
        let pp[0] = segment;

        return;
    }    
}
